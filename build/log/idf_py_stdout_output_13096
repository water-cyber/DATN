[1/13] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D D:\ESP_IDF\datn\build\bootloader\esp-idf\esptool_py && D:\ESP_IDF\Espressif\python_env\idf5.3_py3.11_env\Scripts\python.exe D:/ESP_IDF/Espressif/frameworks/esp-idf-v5.3.1/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 D:/ESP_IDF/datn/build/bootloader/bootloader.bin"
Bootloader binary size 0x6880 bytes. 0x780 bytes (7%) free.
[2/11] Building C object esp-idf/RS485/CMakeFiles/__idf_RS485.dir/rs485.c.obj
[3/11] Linking C static library esp-idf\RS485\libRS485.a
[4/11] Building C object esp-idf/app_mqtt/CMakeFiles/__idf_app_mqtt.dir/mqtt_task.c.obj
[5/11] Linking C static library esp-idf\app_mqtt\libapp_mqtt.a
[6/11] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[7/11] Linking C static library esp-idf\main\libmain.a
[8/11] Generating ld/sections.ld
[9/11] Linking CXX executable datn.elf
[10/11] Generating binary image from built executable
esptool.py v4.8.dev5
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated D:/ESP_IDF/datn/build/datn.bin
[11/11] cmd.exe /C "cd /D D:\ESP_IDF\datn\build\esp-idf\esptool_py && D:\ESP_IDF\Espressif\python_env\idf5.3_py3.11_env\Scripts\python.exe D:/ESP_IDF/Espressif/frameworks/esp-idf-v5.3.1/components/partition_table/check_sizes.py --offset 0x8000 partition --type app D:/ESP_IDF/datn/build/partition_table/partition-table.bin D:/ESP_IDF/datn/build/datn.bin"
datn.bin binary size 0x1025b0 bytes. Smallest app partition is 0x177000 bytes. 0x74a50 bytes (31%) free.
